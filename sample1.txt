#include <iostream>
#include <vector>
#include <algorithm>

int knapsack(const std::vector<int>& valores, const std::vector<int>& pesos, int n, int capacidad) {
    // Crear una tabla dp con (n+1) filas y (capacidad+1) columnas
    std::vector<std::vector<int>> dp(n + 1, std::vector<int>(capacidad + 1, 0));
    
    // Llenar la tabla dp utilizando programación dinámica
    for (int i = 1; i <= n; ++i) {
        for (int w = 1; w <= capacidad; ++w) {
            if (pesos[i - 1] <= w) {
                // Incluir el objeto o no incluirlo
                dp[i][w] = std::max(dp[i - 1][w], dp[i - 1][w - pesos[i - 1]] + valores[i - 1]);
            } else {
                // No incluir el objeto
                dp[i][w] = dp[i - 1][w];
            }
        }
    }
    
    return dp[n][capacidad];  // El valor máximo está en la última celda
}

int main() {
    int n = 4;  // Número de objetos
    int capacidad = 10;  // Capacidad de la mochila
    
    std::vector<int> valores = {60, 100, 120, 80};  // Valores de los objetos
    std::vector<int> pesos = {10, 20, 30, 5};  // Pesos de los objetos
    
    int resultado = knapsack(valores, pesos, n, capacidad);
    
    std::cout << "El valor máximo que se puede obtener es: " << resultado << std::endl;
    
    return 0;
}
